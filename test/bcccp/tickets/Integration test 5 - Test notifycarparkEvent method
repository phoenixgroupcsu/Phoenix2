			if (carpark.isSeasonTicketValid(barcode) &&
 					!carpark.isSeasonTicketInUse(barcode)) {
 					this.seasonTicketId = barcode;
 					setState(STATE.VALIDATED);
 				}
 				else {
 					ui.beep();
 					seasonTicketId = null;
 					log("ticketInserted: invalid ticket id");				
 				}
 			}
 			catch (NumberFormatException e) {
 				ui.beep();
 				seasonTicketId = null;
 				log("ticketInserted: invalid ticket id");				
 			}
 		}
 		else {
 			ui.beep();
 			log("ticketInserted: called while in incorrect state");
 		}
 		
 	}
 	
 	
 	
 	@Override
 	public void ticketTaken() {
 		state_ = STATE.IDLE;
 		if (state_ == STATE.ISSUED || state_ == STATE.VALIDATED ) {
 			setState(STATE.TAKEN);
 		}
 		else {
 			ui.beep();
 			log("ticketTaken: called while in incorrect state");
 		}
 		
 	}
 
 
  
  	@Override
  	public void notifyCarparkEvent() {
 +		state_ = STATE.FULL;
  		if (state_ == STATE.FULL) {
  			if (!carpark.isFull()) {
  				setState(STATE.WAITING);
